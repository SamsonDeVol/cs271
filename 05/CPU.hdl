// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //first mux
    Not(in=instruction[15], out=out1);
    Mux16(a=aluout, b=instruction, sel=out1, out=instrout1);
    
    //a register
    Or(a=instruction[5], b=out1, out=aload);
    ARegister(in=instrout1, load=aload, out=ainstrout, out[0..14]=addressM);
    Mux16(a=ainstrout, b=inM, sel=instrout2, out=out2);
    
    //d register
    And(a=instruction[15], b=instruction[4], out=dload);
    DRegister(in=aluout, load=dload, out=dinstrout);
    
    //second mux
    And(a=instruction[12], b=instruction[15], out=instrout2);

    //ALU
    ALU(x=dinstrout, y=out2,
    zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
    zr=zr, ng=ng, out=outM, out=aluout);
    
    //jumps
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    Or(a=zr, b=ng, out=zrorng);

    //jgt
    And(a=notzr, b=notng, out=jgtgo);
    And(a=jgtgo, b=instruction[0], out=jgtout);
    And(a=jgtout, b=instruction[15], out=jgt);

    //jeq
    And(a=zr, b=instruction[1], out=jeqout);
    And(a=jeqout, b=instruction[15], out=jeq);

    //jge
    And(a=instruction[0], b=instruction[1], out=jgego);
    And(a=jgego, b=notng, out=jgeout);
    And(a=jgeout, b=instruction[15], out=jge);

    //jlt
    And(a=ng, b=instruction[2], out=jltout);
    And(a=jltout, b=instruction[15], out=jlt);

    //jne
    And(a=instruction[0], b=instruction[2], out=jnego);
    And(a=notzr, b=jnego, out=jneout);
    And(a=jneout, b=instruction[15], out=jne);

    //jle
    And(a=instruction[1], b=instruction[2], out=jlego);
    And(a=zrorng, b=jlego, out=jleout);
    And(a=jleout, b=instruction[15], out=jle);

    //jmp
    And(a=jgego, b=jnego, out=jmpout);
    And(a=jmpout, b=instruction[15], out=jmp);

    Or8Way(in[0]=jgt, in[1]=jeq, in[2]=jge, in[3]=jlt, in[4]=jne, in[5]=jle, in[6]=jmp, in[7]=false, out=pcload);

    //pc
    PC(in=ainstrout, load=pcload, inc=true, reset=reset, out[0..14]=pc);

    //write
    And(a=instruction[3], b=instruction[15], out=writeM);

}